class Solution:
    def knapSack(self, n, W, val, wt):
        # code here
        t = [[-1 for _ in range(W+1)]for _ in range(n+1)]
        
        #  Initialization
        for i in range(n+1):
            for j in range(W+1):
                if i==0 or j==0:
                    t[i][j] = 0
                    
        # recursive to iterative 
        #  coding choice diagram:
                elif wt[i-1] <= j:
                    t[i][j] = max(val[i-1]+t[i][j-wt[i-1]],t[i-1][j])
                else:
                    t[i][j] = t[i-1][j]
        return t[n][W]
